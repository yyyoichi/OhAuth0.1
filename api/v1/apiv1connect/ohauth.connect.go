// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/ohauth.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yyyoichi/OhAuth0.1/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatabaseServiceName is the fully-qualified name of the DatabaseService service.
	DatabaseServiceName = "api.v1.DatabaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseServiceGetUserProcedure is the fully-qualified name of the DatabaseService's GetUser RPC.
	DatabaseServiceGetUserProcedure = "/api.v1.DatabaseService/GetUser"
	// DatabaseServiceGetServiceClientProcedure is the fully-qualified name of the DatabaseService's
	// GetServiceClient RPC.
	DatabaseServiceGetServiceClientProcedure = "/api.v1.DatabaseService/GetServiceClient"
	// DatabaseServiceGetAuthorizationCodeProcedure is the fully-qualified name of the DatabaseService's
	// GetAuthorizationCode RPC.
	DatabaseServiceGetAuthorizationCodeProcedure = "/api.v1.DatabaseService/GetAuthorizationCode"
	// DatabaseServiceCreateAuthorizationCodeProcedure is the fully-qualified name of the
	// DatabaseService's CreateAuthorizationCode RPC.
	DatabaseServiceCreateAuthorizationCodeProcedure = "/api.v1.DatabaseService/CreateAuthorizationCode"
	// DatabaseServiceGetAccessTokenProcedure is the fully-qualified name of the DatabaseService's
	// GetAccessToken RPC.
	DatabaseServiceGetAccessTokenProcedure = "/api.v1.DatabaseService/GetAccessToken"
	// DatabaseServiceCreateAccessTokenProcedure is the fully-qualified name of the DatabaseService's
	// CreateAccessToken RPC.
	DatabaseServiceCreateAccessTokenProcedure = "/api.v1.DatabaseService/CreateAccessToken"
	// DatabaseServiceGetRefreshTokenProcedure is the fully-qualified name of the DatabaseService's
	// GetRefreshToken RPC.
	DatabaseServiceGetRefreshTokenProcedure = "/api.v1.DatabaseService/GetRefreshToken"
	// DatabaseServiceCreateRefreshTokenProcedure is the fully-qualified name of the DatabaseService's
	// CreateRefreshToken RPC.
	DatabaseServiceCreateRefreshTokenProcedure = "/api.v1.DatabaseService/CreateRefreshToken"
	// DatabaseServicePingProcedure is the fully-qualified name of the DatabaseService's Ping RPC.
	DatabaseServicePingProcedure = "/api.v1.DatabaseService/Ping"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	databaseServiceServiceDescriptor                       = v1.File_api_v1_ohauth_proto.Services().ByName("DatabaseService")
	databaseServiceGetUserMethodDescriptor                 = databaseServiceServiceDescriptor.Methods().ByName("GetUser")
	databaseServiceGetServiceClientMethodDescriptor        = databaseServiceServiceDescriptor.Methods().ByName("GetServiceClient")
	databaseServiceGetAuthorizationCodeMethodDescriptor    = databaseServiceServiceDescriptor.Methods().ByName("GetAuthorizationCode")
	databaseServiceCreateAuthorizationCodeMethodDescriptor = databaseServiceServiceDescriptor.Methods().ByName("CreateAuthorizationCode")
	databaseServiceGetAccessTokenMethodDescriptor          = databaseServiceServiceDescriptor.Methods().ByName("GetAccessToken")
	databaseServiceCreateAccessTokenMethodDescriptor       = databaseServiceServiceDescriptor.Methods().ByName("CreateAccessToken")
	databaseServiceGetRefreshTokenMethodDescriptor         = databaseServiceServiceDescriptor.Methods().ByName("GetRefreshToken")
	databaseServiceCreateRefreshTokenMethodDescriptor      = databaseServiceServiceDescriptor.Methods().ByName("CreateRefreshToken")
	databaseServicePingMethodDescriptor                    = databaseServiceServiceDescriptor.Methods().ByName("Ping")
)

// DatabaseServiceClient is a client for the api.v1.DatabaseService service.
type DatabaseServiceClient interface {
	GetUser(context.Context) *connect.BidiStreamForClient[v1.GetUserRequest, v1.GetUserResponse]
	GetServiceClient(context.Context) *connect.BidiStreamForClient[v1.GetServiceClientRequest, v1.GetServiceClientResponse]
	GetAuthorizationCode(context.Context) *connect.BidiStreamForClient[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse]
	CreateAuthorizationCode(context.Context) *connect.BidiStreamForClient[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse]
	GetAccessToken(context.Context) *connect.BidiStreamForClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]
	CreateAccessToken(context.Context) *connect.BidiStreamForClient[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse]
	GetRefreshToken(context.Context) *connect.BidiStreamForClient[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse]
	CreateRefreshToken(context.Context) *connect.BidiStreamForClient[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse]
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewDatabaseServiceClient constructs a client for the api.v1.DatabaseService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatabaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &databaseServiceClient{
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+DatabaseServiceGetUserProcedure,
			connect.WithSchema(databaseServiceGetUserMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getServiceClient: connect.NewClient[v1.GetServiceClientRequest, v1.GetServiceClientResponse](
			httpClient,
			baseURL+DatabaseServiceGetServiceClientProcedure,
			connect.WithSchema(databaseServiceGetServiceClientMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAuthorizationCode: connect.NewClient[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse](
			httpClient,
			baseURL+DatabaseServiceGetAuthorizationCodeProcedure,
			connect.WithSchema(databaseServiceGetAuthorizationCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAuthorizationCode: connect.NewClient[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse](
			httpClient,
			baseURL+DatabaseServiceCreateAuthorizationCodeProcedure,
			connect.WithSchema(databaseServiceCreateAuthorizationCodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAccessToken: connect.NewClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse](
			httpClient,
			baseURL+DatabaseServiceGetAccessTokenProcedure,
			connect.WithSchema(databaseServiceGetAccessTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAccessToken: connect.NewClient[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse](
			httpClient,
			baseURL+DatabaseServiceCreateAccessTokenProcedure,
			connect.WithSchema(databaseServiceCreateAccessTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRefreshToken: connect.NewClient[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse](
			httpClient,
			baseURL+DatabaseServiceGetRefreshTokenProcedure,
			connect.WithSchema(databaseServiceGetRefreshTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createRefreshToken: connect.NewClient[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse](
			httpClient,
			baseURL+DatabaseServiceCreateRefreshTokenProcedure,
			connect.WithSchema(databaseServiceCreateRefreshTokenMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+DatabaseServicePingProcedure,
			connect.WithSchema(databaseServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// databaseServiceClient implements DatabaseServiceClient.
type databaseServiceClient struct {
	getUser                 *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	getServiceClient        *connect.Client[v1.GetServiceClientRequest, v1.GetServiceClientResponse]
	getAuthorizationCode    *connect.Client[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse]
	createAuthorizationCode *connect.Client[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse]
	getAccessToken          *connect.Client[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]
	createAccessToken       *connect.Client[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse]
	getRefreshToken         *connect.Client[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse]
	createRefreshToken      *connect.Client[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse]
	ping                    *connect.Client[v1.PingRequest, v1.PingResponse]
}

// GetUser calls api.v1.DatabaseService.GetUser.
func (c *databaseServiceClient) GetUser(ctx context.Context) *connect.BidiStreamForClient[v1.GetUserRequest, v1.GetUserResponse] {
	return c.getUser.CallBidiStream(ctx)
}

// GetServiceClient calls api.v1.DatabaseService.GetServiceClient.
func (c *databaseServiceClient) GetServiceClient(ctx context.Context) *connect.BidiStreamForClient[v1.GetServiceClientRequest, v1.GetServiceClientResponse] {
	return c.getServiceClient.CallBidiStream(ctx)
}

// GetAuthorizationCode calls api.v1.DatabaseService.GetAuthorizationCode.
func (c *databaseServiceClient) GetAuthorizationCode(ctx context.Context) *connect.BidiStreamForClient[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse] {
	return c.getAuthorizationCode.CallBidiStream(ctx)
}

// CreateAuthorizationCode calls api.v1.DatabaseService.CreateAuthorizationCode.
func (c *databaseServiceClient) CreateAuthorizationCode(ctx context.Context) *connect.BidiStreamForClient[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse] {
	return c.createAuthorizationCode.CallBidiStream(ctx)
}

// GetAccessToken calls api.v1.DatabaseService.GetAccessToken.
func (c *databaseServiceClient) GetAccessToken(ctx context.Context) *connect.BidiStreamForClient[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse] {
	return c.getAccessToken.CallBidiStream(ctx)
}

// CreateAccessToken calls api.v1.DatabaseService.CreateAccessToken.
func (c *databaseServiceClient) CreateAccessToken(ctx context.Context) *connect.BidiStreamForClient[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse] {
	return c.createAccessToken.CallBidiStream(ctx)
}

// GetRefreshToken calls api.v1.DatabaseService.GetRefreshToken.
func (c *databaseServiceClient) GetRefreshToken(ctx context.Context) *connect.BidiStreamForClient[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse] {
	return c.getRefreshToken.CallBidiStream(ctx)
}

// CreateRefreshToken calls api.v1.DatabaseService.CreateRefreshToken.
func (c *databaseServiceClient) CreateRefreshToken(ctx context.Context) *connect.BidiStreamForClient[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse] {
	return c.createRefreshToken.CallBidiStream(ctx)
}

// Ping calls api.v1.DatabaseService.Ping.
func (c *databaseServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// DatabaseServiceHandler is an implementation of the api.v1.DatabaseService service.
type DatabaseServiceHandler interface {
	GetUser(context.Context, *connect.BidiStream[v1.GetUserRequest, v1.GetUserResponse]) error
	GetServiceClient(context.Context, *connect.BidiStream[v1.GetServiceClientRequest, v1.GetServiceClientResponse]) error
	GetAuthorizationCode(context.Context, *connect.BidiStream[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse]) error
	CreateAuthorizationCode(context.Context, *connect.BidiStream[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse]) error
	GetAccessToken(context.Context, *connect.BidiStream[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]) error
	CreateAccessToken(context.Context, *connect.BidiStream[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse]) error
	GetRefreshToken(context.Context, *connect.BidiStream[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse]) error
	CreateRefreshToken(context.Context, *connect.BidiStream[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse]) error
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
}

// NewDatabaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseServiceHandler(svc DatabaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	databaseServiceGetUserHandler := connect.NewBidiStreamHandler(
		DatabaseServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(databaseServiceGetUserMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetServiceClientHandler := connect.NewBidiStreamHandler(
		DatabaseServiceGetServiceClientProcedure,
		svc.GetServiceClient,
		connect.WithSchema(databaseServiceGetServiceClientMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetAuthorizationCodeHandler := connect.NewBidiStreamHandler(
		DatabaseServiceGetAuthorizationCodeProcedure,
		svc.GetAuthorizationCode,
		connect.WithSchema(databaseServiceGetAuthorizationCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateAuthorizationCodeHandler := connect.NewBidiStreamHandler(
		DatabaseServiceCreateAuthorizationCodeProcedure,
		svc.CreateAuthorizationCode,
		connect.WithSchema(databaseServiceCreateAuthorizationCodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetAccessTokenHandler := connect.NewBidiStreamHandler(
		DatabaseServiceGetAccessTokenProcedure,
		svc.GetAccessToken,
		connect.WithSchema(databaseServiceGetAccessTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateAccessTokenHandler := connect.NewBidiStreamHandler(
		DatabaseServiceCreateAccessTokenProcedure,
		svc.CreateAccessToken,
		connect.WithSchema(databaseServiceCreateAccessTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceGetRefreshTokenHandler := connect.NewBidiStreamHandler(
		DatabaseServiceGetRefreshTokenProcedure,
		svc.GetRefreshToken,
		connect.WithSchema(databaseServiceGetRefreshTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServiceCreateRefreshTokenHandler := connect.NewBidiStreamHandler(
		DatabaseServiceCreateRefreshTokenProcedure,
		svc.CreateRefreshToken,
		connect.WithSchema(databaseServiceCreateRefreshTokenMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	databaseServicePingHandler := connect.NewUnaryHandler(
		DatabaseServicePingProcedure,
		svc.Ping,
		connect.WithSchema(databaseServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.DatabaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseServiceGetUserProcedure:
			databaseServiceGetUserHandler.ServeHTTP(w, r)
		case DatabaseServiceGetServiceClientProcedure:
			databaseServiceGetServiceClientHandler.ServeHTTP(w, r)
		case DatabaseServiceGetAuthorizationCodeProcedure:
			databaseServiceGetAuthorizationCodeHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateAuthorizationCodeProcedure:
			databaseServiceCreateAuthorizationCodeHandler.ServeHTTP(w, r)
		case DatabaseServiceGetAccessTokenProcedure:
			databaseServiceGetAccessTokenHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateAccessTokenProcedure:
			databaseServiceCreateAccessTokenHandler.ServeHTTP(w, r)
		case DatabaseServiceGetRefreshTokenProcedure:
			databaseServiceGetRefreshTokenHandler.ServeHTTP(w, r)
		case DatabaseServiceCreateRefreshTokenProcedure:
			databaseServiceCreateRefreshTokenHandler.ServeHTTP(w, r)
		case DatabaseServicePingProcedure:
			databaseServicePingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseServiceHandler struct{}

func (UnimplementedDatabaseServiceHandler) GetUser(context.Context, *connect.BidiStream[v1.GetUserRequest, v1.GetUserResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.GetUser is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetServiceClient(context.Context, *connect.BidiStream[v1.GetServiceClientRequest, v1.GetServiceClientResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.GetServiceClient is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetAuthorizationCode(context.Context, *connect.BidiStream[v1.GetAuthorizationCodeRequest, v1.GetAuthorizationCodeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.GetAuthorizationCode is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateAuthorizationCode(context.Context, *connect.BidiStream[v1.CreateAuthorizationCodeRequest, v1.CreateAuthorizationCodeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.CreateAuthorizationCode is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetAccessToken(context.Context, *connect.BidiStream[v1.GetAccessTokenRequest, v1.GetAccessTokenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.GetAccessToken is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateAccessToken(context.Context, *connect.BidiStream[v1.CreateAccessTokenRequest, v1.CreateAccessTokenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.CreateAccessToken is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetRefreshToken(context.Context, *connect.BidiStream[v1.GetRefreshTokenRequest, v1.GetRefreshTokenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.GetRefreshToken is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) CreateRefreshToken(context.Context, *connect.BidiStream[v1.CreateRefreshTokenRequest, v1.CreateRefreshTokenResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.CreateRefreshToken is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.DatabaseService.Ping is not implemented"))
}
